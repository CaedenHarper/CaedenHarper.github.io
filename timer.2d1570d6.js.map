{"mappings":"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","sources":["<anon>","src/timer/index.js"],"sourcesContent":["var $9419a70399195e1f$exports = {};\nconst $9419a70399195e1f$var$main_div = document.getElementById('main_div');\nconst $9419a70399195e1f$var$celebration_emoji = String.fromCodePoint(127881);\nconst $9419a70399195e1f$var$all_units = [\n    'hours',\n    'minutes',\n    'seconds',\n    'fortnights',\n    'dog_hours',\n    'usain_bolt_100_meters',\n    'pizza_hut',\n    'chopin',\n    'pills',\n    'calls'\n];\n// TODO: add color option\nclass $9419a70399195e1f$var$Timer {\n    constructor(date, repeating, final, id_name, class_name){\n        this.date = date;\n        // if the timer repeats every week once passed\n        this.repeating = repeating;\n        // ms since jan 1st 1970\n        this.ms = date.getTime();\n        // distance between date and now\n        // final symbol to display after time is up\n        this.final = final;\n        // create html element\n        this.html_element = document.createElement('div');\n        this.html_element.id = id_name;\n        this.html_element.className = `noselect ${class_name}`;\n        this.html_element.textContent = '';\n        $9419a70399195e1f$var$main_div.appendChild(this.html_element);\n        this.update(new Date().getTime());\n    }\n    update(current_time) {\n        // amount of ms in two weeks\n        const two_weeks = 1209600000;\n        this.distance = this.ms - current_time;\n        // if timer is repeating, add two weeks until it is in the future\n        if (this.repeating) while(this.distance <= 0)this.distance += two_weeks;\n        // Time calculations for days, hours, minutes and seconds\n        this.days = Math.floor(this.distance / 86400000);\n        this.hours = Math.floor(this.distance % 86400000 / 3600000);\n        this.minutes = Math.floor(this.distance % 3600000 / 60000);\n        this.seconds = Math.floor(this.distance % 60000 / 1000);\n        this.display();\n    }\n    display() {\n        if (this.distance < 0) this.html_element.textContent = this.final;\n        else if (this.minutes <= 0 && this.hours <= 0 && this.days <= 0) this.html_element.textContent = `${this.seconds}s `;\n        else if (this.hours <= 0 && this.days <= 0) this.html_element.textContent = `${this.minutes}m ${this.seconds}s`;\n        else if (this.days <= 0) this.html_element.textContent = `${this.hours}h ${this.minutes}m ${this.seconds}s`;\n        else this.html_element.textContent = `${this.days}d ${this.hours}h ${this.minutes}m ${this.seconds}s`;\n    }\n}\nclass $9419a70399195e1f$var$SubTimer {\n    constructor(date, repeating, id_name, class_name){\n        this.date = date;\n        // if the timer repeats every week once passed\n        this.repeating = repeating;\n        // ms since jan 1st 1970\n        this.ms = date.getTime();\n        // distance between date and now\n        // create html element\n        this.html_element = document.createElement('div');\n        this.html_element.id = id_name;\n        this.html_element.className = `noselect ${class_name}`;\n        this.html_element.textContent = '';\n        $9419a70399195e1f$var$main_div.appendChild(this.html_element);\n        this.html_element.addEventListener('click', this.next_unit.bind(this));\n        this.current_unit = $9419a70399195e1f$var$all_units[0];\n        this.update(new Date().getTime());\n    }\n    update(current_time) {\n        // amount of ms in two weeks\n        const two_weeks = 1209600000;\n        this.distance = this.ms - current_time;\n        // if timer is repeating, add two weeks until it is in the future\n        // TODO: make this happen once instead of per update\n        if (this.repeating) while(this.distance <= 0)this.distance += two_weeks;\n        // Time calculations for days, hours, minutes and seconds\n        this.days = Math.floor(this.distance / 86400000);\n        this.hours = Math.floor(this.distance % 86400000 / 3600000);\n        this.minutes = Math.floor(this.distance % 3600000 / 60000);\n        this.seconds = Math.floor(this.distance % 60000 / 1000);\n        // full seconds used for some display functions\n        this.full_seconds = this.days * 86400 + this.hours * 3600 + this.minutes * 60 + this.seconds;\n        this.current_unit_display();\n    }\n    // TODO: refactor each of these display functions\n    display_hours() {\n        const full_hours = this.days * 24 + this.hours;\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${full_hours} hours)`;\n    }\n    display_minutes() {\n        const full_minutes = this.days * 1440 + this.hours * 60 + this.minutes;\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${full_minutes} minutes)`;\n    }\n    display_seconds() {\n        if (this.distance < 0) this.html_element.textContent = '0 seconds';\n        else this.html_element.textContent = `(${this.full_seconds} seconds)`;\n    }\n    display_fortnights() {\n        // fortnight = 2 weeks = 14 days = 1,210,000 seconds\n        const fortnight_constant = 1210000;\n        const num_fortnights = (this.full_seconds / (1.0 * fortnight_constant)).toFixed(1);\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_fortnights} fortnights)`;\n    }\n    display_dog_hours() {\n        const num_dog_seconds = this.full_seconds * 7;\n        const num_dog_hours = Math.round(num_dog_seconds / 3600);\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_dog_hours} dog hours)`;\n    }\n    display_usain_bolt_100_meters() {\n        const num_usain_bolt = Math.round(this.full_seconds / 9.58);\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_usain_bolt} Usain Bolt 100 meters)`;\n    }\n    display_pizza_hut() {\n        const num_pizza_hut = Math.round(this.full_seconds / 900);\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_pizza_hut} Pizza Hut orders)`;\n    }\n    display_chopin() {\n        const num_chopin_hours = Math.round(2 * (this.full_seconds / 3600));\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_chopin_hours} Chopin hours)`;\n    }\n    display_pills() {\n        const num_pills = Math.round(16 * (this.full_seconds / 86400));\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_pills} pills)`;\n    }\n    display_calls() {\n        // each call is about 13.5 minutes\n        const num_calls = Math.round(this.full_seconds / 60 / 13.5);\n        if (this.distance < 0) this.html_element.textContent = '';\n        else this.html_element.textContent = `(${num_calls} calls)`;\n    }\n    // TODO: refactor\n    current_unit_display() {\n        switch(this.current_unit){\n            case 'hours':\n                this.display_hours();\n                break;\n            case 'minutes':\n                this.display_minutes();\n                break;\n            case 'seconds':\n                this.display_seconds();\n                break;\n            case 'fortnights':\n                this.display_fortnights();\n                break;\n            case 'dog_hours':\n                this.display_dog_hours();\n                break;\n            case 'usain_bolt_100_meters':\n                this.display_usain_bolt_100_meters();\n                break;\n            case 'pizza_hut':\n                this.display_pizza_hut();\n                break;\n            case 'chopin':\n                this.display_chopin();\n                break;\n            case 'pills':\n                this.display_pills();\n                break;\n            case 'calls':\n                this.display_calls();\n                break;\n            default:\n                this.display_hours();\n                break;\n        }\n    }\n    next_unit() {\n        const index = $9419a70399195e1f$var$all_units.indexOf(this.current_unit);\n        if (index === -1) {\n            this.current_unit = 'hours';\n            this.current_unit_display();\n            return;\n        }\n        this.current_unit = $9419a70399195e1f$var$all_units[(index + 1) % $9419a70399195e1f$var$all_units.length];\n        this.current_unit_display();\n    }\n}\nconst $9419a70399195e1f$var$timers = [];\nconst $9419a70399195e1f$var$countDownDate = new Date('Mar 31, 2025 14:45:00');\nconst $9419a70399195e1f$var$countDownTimer = new $9419a70399195e1f$var$Timer($9419a70399195e1f$var$countDownDate, false, $9419a70399195e1f$var$celebration_emoji, 'countdown', '');\nconst $9419a70399195e1f$var$countDownSubTimer = new $9419a70399195e1f$var$SubTimer($9419a70399195e1f$var$countDownDate, false, 'countdownsub', '');\n$9419a70399195e1f$var$timers.push($9419a70399195e1f$var$countDownTimer, $9419a70399195e1f$var$countDownSubTimer);\nconst $9419a70399195e1f$var$payCheckDate = new Date('Feb 14, 2024 06:00:00');\nconst $9419a70399195e1f$var$payCheckTimer = new $9419a70399195e1f$var$Timer($9419a70399195e1f$var$payCheckDate, true, '', 'paycheck', 'pay');\nconst $9419a70399195e1f$var$payCheckSubTimer = new $9419a70399195e1f$var$SubTimer($9419a70399195e1f$var$payCheckDate, true, 'paychecksub', 'pay');\n$9419a70399195e1f$var$timers.push($9419a70399195e1f$var$payCheckTimer, $9419a70399195e1f$var$payCheckSubTimer);\n// const gradDate = new Date('May 17, 2024 00:00:00');\n// const gradDateTimer = new Timer(gradDate, false, '', 'graddate', 'grad');\n// const gradDateSubTimer = new SubTimer(gradDate, false, 'graddatesub', 'grad');\n// timers.push(gradDateTimer, gradDateSubTimer);\nfunction $9419a70399195e1f$var$main() {\n    const current_time = new Date().getTime();\n    for(let i = 0; i < $9419a70399195e1f$var$timers.length; i += 1){\n        const timer = $9419a70399195e1f$var$timers[i];\n        timer.update(current_time);\n    }\n}\nsetInterval($9419a70399195e1f$var$main, 1000);\n\n\n//# sourceMappingURL=timer.2d1570d6.js.map\n","const main_div = document.getElementById('main_div');\nconst celebration_emoji = String.fromCodePoint(127881);\nconst all_units = ['hours', 'minutes', 'seconds', 'fortnights', 'dog_hours',\n'usain_bolt_100_meters', 'pizza_hut', 'chopin', 'pills', 'calls'];\n\n// TODO: add color option\nclass Timer {\n    constructor(date, repeating, final, id_name, class_name) {\n        this.date = date;\n        // if the timer repeats every week once passed\n        this.repeating = repeating;\n        // ms since jan 1st 1970\n        this.ms = date.getTime();\n        // distance between date and now\n\n        // final symbol to display after time is up\n        this.final = final;\n\n        // create html element\n        this.html_element = document.createElement('div');\n        this.html_element.id = id_name;\n        this.html_element.className = `noselect ${class_name}`;\n        this.html_element.textContent = '';\n        main_div.appendChild(this.html_element);\n\n        this.update(new Date().getTime());\n    }\n\n    update(current_time) {\n        // amount of ms in two weeks\n        const two_weeks = 1209600000;\n\n        this.distance = this.ms - current_time;\n\n        // if timer is repeating, add two weeks until it is in the future\n        if (this.repeating) {\n            while (this.distance <= 0) {\n                this.distance += two_weeks;\n            }\n        }\n\n        // Time calculations for days, hours, minutes and seconds\n        this.days = Math.floor(this.distance / (1000 * 60 * 60 * 24));\n        this.hours = Math.floor((this.distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        this.minutes = Math.floor((this.distance % (1000 * 60 * 60)) / (1000 * 60));\n        this.seconds = Math.floor((this.distance % (1000 * 60)) / 1000);\n\n        this.display();\n    }\n\n    display() {\n        if (this.distance < 0) {\n            this.html_element.textContent = this.final;\n        } else if (this.minutes <= 0 && this.hours <= 0 && this.days <= 0) {\n            this.html_element.textContent = `${this.seconds}s `;\n        } else if (this.hours <= 0 && this.days <= 0) {\n            this.html_element.textContent = `${this.minutes}m ${this.seconds}s`;\n        } else if (this.days <= 0) {\n            this.html_element.textContent = `${this.hours}h ${this.minutes}m ${this.seconds}s`;\n        } else {\n            this.html_element.textContent = `${this.days}d ${this.hours}h ${this.minutes}m ${this.seconds}s`;\n        }\n    }\n}\n\nclass SubTimer {\n    constructor(date, repeating, id_name, class_name) {\n        this.date = date;\n        // if the timer repeats every week once passed\n        this.repeating = repeating;\n        // ms since jan 1st 1970\n        this.ms = date.getTime();\n        // distance between date and now\n\n        // create html element\n        this.html_element = document.createElement('div');\n        this.html_element.id = id_name;\n        this.html_element.className = `noselect ${class_name}`;\n        this.html_element.textContent = '';\n        main_div.appendChild(this.html_element);\n\n        this.html_element.addEventListener('click', this.next_unit.bind(this));\n\n        this.current_unit = all_units[0];\n        this.update(new Date().getTime());\n    }\n\n    update(current_time) {\n        // amount of ms in two weeks\n        const two_weeks = 1209600000;\n\n        this.distance = this.ms - current_time;\n\n        // if timer is repeating, add two weeks until it is in the future\n        // TODO: make this happen once instead of per update\n        if (this.repeating) {\n            while (this.distance <= 0) {\n                this.distance += two_weeks;\n            }\n        }\n\n        // Time calculations for days, hours, minutes and seconds\n        this.days = Math.floor(this.distance / (1000 * 60 * 60 * 24));\n        this.hours = Math.floor((this.distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        this.minutes = Math.floor((this.distance % (1000 * 60 * 60)) / (1000 * 60));\n        this.seconds = Math.floor((this.distance % (1000 * 60)) / 1000);\n        // full seconds used for some display functions\n        this.full_seconds = this.days * 24 * 60 * 60 + this.hours * 60 * 60\n        + this.minutes * 60 + this.seconds;\n\n        this.current_unit_display();\n    }\n\n    // TODO: refactor each of these display functions\n    display_hours() {\n        const full_hours = this.days * 24 + this.hours;\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${full_hours} hours)`;\n        }\n    }\n\n    display_minutes() {\n        const full_minutes = this.days * 24 * 60 + this.hours * 60 + this.minutes;\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${full_minutes} minutes)`;\n        }\n    }\n\n    display_seconds() {\n        if (this.distance < 0) {\n            this.html_element.textContent = '0 seconds';\n        } else {\n            this.html_element.textContent = `(${this.full_seconds} seconds)`;\n        }\n    }\n\n    display_fortnights() {\n        // fortnight = 2 weeks = 14 days = 1,210,000 seconds\n        const fortnight_constant = 1210000;\n        const num_fortnights = (this.full_seconds / (1.0 * fortnight_constant)).toFixed(1);\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_fortnights} fortnights)`;\n        }\n    }\n\n    display_dog_hours() {\n        const num_dog_seconds = (this.full_seconds * 7);\n        const num_dog_hours = Math.round(num_dog_seconds / (60 * 60));\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_dog_hours} dog hours)`;\n        }\n    }\n\n    display_usain_bolt_100_meters() {\n        const num_usain_bolt = Math.round(this.full_seconds / (9.58));\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_usain_bolt} Usain Bolt 100 meters)`;\n        }\n    }\n\n    display_pizza_hut() {\n        const num_pizza_hut = Math.round(this.full_seconds / (15 * 60));\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_pizza_hut} Pizza Hut orders)`;\n        }\n    }\n\n    display_chopin() {\n        const num_chopin_hours = Math.round(2 * (this.full_seconds / (60 * 60)));\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_chopin_hours} Chopin hours)`;\n        }\n    }\n\n    display_pills() {\n        const num_pills = Math.round(16 * (this.full_seconds / 86400));\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_pills} pills)`;\n        }\n    }\n\n    display_calls() {\n        // each call is about 13.5 minutes\n        const num_calls = Math.round((this.full_seconds / 60) / 13.5);\n        if (this.distance < 0) {\n            this.html_element.textContent = '';\n        } else {\n            this.html_element.textContent = `(${num_calls} calls)`;\n        }\n    }\n\n    // TODO: refactor\n    current_unit_display() {\n        switch (this.current_unit) {\n            case 'hours':\n                this.display_hours();\n                break;\n            case 'minutes':\n                this.display_minutes();\n                break;\n            case 'seconds':\n                this.display_seconds();\n                break;\n            case 'fortnights':\n                this.display_fortnights();\n                break;\n            case 'dog_hours':\n                this.display_dog_hours();\n                break;\n            case 'usain_bolt_100_meters':\n                this.display_usain_bolt_100_meters();\n                break;\n            case 'pizza_hut':\n                this.display_pizza_hut();\n                break;\n            case 'chopin':\n                this.display_chopin();\n                break;\n            case 'pills':\n                this.display_pills();\n                break;\n            case 'calls':\n                this.display_calls();\n                break;\n            default:\n                this.display_hours();\n                break;\n        }\n    }\n\n    next_unit() {\n        const index = all_units.indexOf(this.current_unit);\n        if (index === -1) {\n            this.current_unit = 'hours';\n            this.current_unit_display();\n            return;\n        }\n\n        this.current_unit = all_units[(index + 1) % all_units.length];\n        this.current_unit_display();\n    }\n}\n\nconst timers = [];\n\nconst countDownDate = new Date('Mar 31, 2025 14:45:00');\nconst countDownTimer = new Timer(countDownDate, false, celebration_emoji, 'countdown', '');\nconst countDownSubTimer = new SubTimer(countDownDate, false, 'countdownsub', '');\ntimers.push(countDownTimer, countDownSubTimer);\n\nconst payCheckDate = new Date('Feb 14, 2024 06:00:00');\nconst payCheckTimer = new Timer(payCheckDate, true, '', 'paycheck', 'pay');\nconst payCheckSubTimer = new SubTimer(payCheckDate, true, 'paychecksub', 'pay');\ntimers.push(payCheckTimer, payCheckSubTimer);\n\n// const gradDate = new Date('May 17, 2024 00:00:00');\n// const gradDateTimer = new Timer(gradDate, false, '', 'graddate', 'grad');\n// const gradDateSubTimer = new SubTimer(gradDate, false, 'graddatesub', 'grad');\n// timers.push(gradDateTimer, gradDateSubTimer);\n\nfunction main() {\n    const current_time = new Date().getTime();\n\n    for (let i = 0; i < timers.length; i += 1) {\n        const timer = timers[i];\n        timer.update(current_time);\n    }\n}\n\nsetInterval(main, 1000);\n"],"names":["$9419a70399195e1f$var$main_div","document","getElementById","$9419a70399195e1f$var$celebration_emoji","String","fromCodePoint","$9419a70399195e1f$var$all_units","$9419a70399195e1f$var$Timer","constructor","date","repeating","final","id_name","class_name","ms","getTime","html_element","createElement","id","className","textContent","appendChild","update","Date","current_time","distance","days","Math","floor","hours","minutes","seconds","display","$9419a70399195e1f$var$SubTimer","addEventListener","next_unit","bind","current_unit","full_seconds","current_unit_display","display_hours","full_hours","display_minutes","full_minutes","display_seconds","display_fortnights","num_fortnights","toFixed","display_dog_hours","num_dog_hours","round","num_dog_seconds","display_usain_bolt_100_meters","num_usain_bolt","display_pizza_hut","num_pizza_hut","display_chopin","num_chopin_hours","display_pills","num_pills","display_calls","num_calls","index","indexOf","length","$9419a70399195e1f$var$timers","$9419a70399195e1f$var$countDownDate","$9419a70399195e1f$var$countDownTimer","$9419a70399195e1f$var$countDownSubTimer","push","$9419a70399195e1f$var$payCheckDate","$9419a70399195e1f$var$payCheckTimer","$9419a70399195e1f$var$payCheckSubTimer","setInterval","i","timer"],"version":3,"file":"timer.2d1570d6.js.map"}