/* eslint-disable @stylistic/array-bracket-newline */
/* eslint-disable @stylistic/function-paren-newline */
import { text_parse, CubeTime } from '../../../src/cube/index.ts';

type TestCase = Map<string, CubeTime[]>;

test('empty string input', () => {
    const cases: TestCase = new Map(
        [
            ['', []],
        ],
    );

    for (const [input, output] of cases) {
        expect(text_parse(input)).toEqual(output);
    }
});

test('zero', () => {
    const cases: TestCase = new Map(
        [
            ['0.00\n00.00\n0:00.00\n00:00.00\n000:00.00', []],
        ],
    );

    for (const [input, output] of cases) {
        expect(text_parse(input)).toEqual(output);
    }
});

test('CSTimer example full', () => {
    const cases: TestCase = new Map(
        [
            [`Generated By csTimer on 2025-05-22
solves/total: 9/10

single
    best: 5.34
    worst: 12:37:45.00

mean of 3
    current: DNF (σ = 18.33)
    best: 10:45.36 (σ = 1102.50)

avg of 5
    current: 4:42:58.10 (σ = 24817.72)
    best: 2:00.53 (σ = 152.32)

Average: 1:50:52.54 (σ = 15794.79)
Mean: 1:38:33.96

Time List:
1. 5.34   F D2 F' L2 B2 L2 F L2 D2 U2 R' U' B' D' F' L2 U2 B2 D' 
2. 12.34   R D' R B2 L D2 B2 R B2 R' F2 R' U B R2 B2 D2 F R' 
3. 31:58.41[?? 34.32]   B2 R2 D L2 B2 U2 B' L2 B' L2 F L2 U2 D' L' B2 L' B R' U 
4. 54.54   R F R2 B2 L' D' B U2 B2 L U2 R2 B2 U2 B2 L F2 U2 D R 
5. 4:54.72   U' B2 R2 U' B2 L2 B2 D' U L2 U B' R2 F R D' B2 L R B' U 
6. 12:37:45.00+   F2 D' F2 U' F2 D' B2 R2 D' U' R2 B' R2 F' L' D' F' R2 B U' R' 
7. 1:30:35.00   D2 L2 U' B D' L F R2 B2 U2 R2 B' R2 L2 B2 U2 D2 L U' 
8. 5.98   R F U' D' L F2 B' D' U2 R2 F' L2 B2 D2 B L2 U2 F' L2 F R 
9. DNF(34.26)   L F' R U2 R2 U2 F U L' D2 R2 F2 U2 D2 F D2 L2 D2 B' D2
disregard this random line 
10. 34.31   R' B D2 B2 R2 D' R2 U' R' F' L2 D2 B' D2 R2 B' R2 F2 L2 D2`, [
                new CubeTime(5.34, false, false),
                new CubeTime(12.34, false, false),
                new CubeTime(1918.41, false, false),
                new CubeTime(54.54, false, false),
                new CubeTime(294.72, false, false),
                new CubeTime(45465.00, true, false),
                new CubeTime(5435, false, false),
                new CubeTime(5.98, false, false),
                new CubeTime(34.26, false, true),
                new CubeTime(34.31, false, false),
            ]],
        ],
    );

    for (const [input, output] of cases) {
        expect(text_parse(input)).toEqual(output);
    }
});
